{:paths ["."]
 :tasks
 {:requires ([clojure.java.shell :refer [sh]]
             [babashka.fs :as fs]
             [clojure.string :as str])
  :init (do (defn env [s] (System/getenv s))

            (defn print-args []
             (prn (:name (current-task))
                  *command-line-args*)))

  install:nuget (shell "curl -L -o bin  https://dist.nuget.org/win-x86-commandline/latest/nuget.exe")
  install:rime (do
                 (fs/copy "etc/rime-custom/default.custom.yaml" "etc/rime-ice" {:replace-existing true})
                 (fs/copy "etc/rime-custom/weasel.custom.yaml" "etc/rime-ice" {:replace-existing true}))
  install:plantuml (do
                     (shell "bash -c" (format "cp plantuml/plantuml.jar \"plantuml/plantuml-%s.jar\"" (.format (java.text.SimpleDateFormat. "yyy-MM-dd-HH-mm-ss") (java.util.Date.))))
                     (shell "curl -L -o plantuml/plantuml.jar https://github.com/plantuml/plantuml/releases/download/snapshot/plantuml-SNAPSHOT.jar"))
  install:babashka (do
                       (shell {:continue true} "curl -L -O https://github.com/babashka/babashka/releases/download/v1.3.189/babashka-1.3.189-windows-amd64.zip")
                       ;; can't overwrite running bb.exe, need to copy newbb.exe to bb.exe by hand.
                       (shell {:continue true} "unzip -o babashka-1.3.189-windows-amd64.zip -d babashka"))
  install:clojure (do
                    (shell {:continue true} "curl -L -O https://github.com/clojure/brew-install/releases/latest/download/posix-install.sh")
                    (shell {:continue true} "./posix-install.sh --prefix /kimikit/clojure"))

  install:sumatrapdf (fs/copy "src/sumatrapdf/out/rel64/SumatraPDF.exe" "sumatrapdf/" {:replace-existing true})

  install:drawio (fs/copy-tree "src/drawio-desktop/dist/win-unpacked" "drawio/" {:replace-existing true})

  install:all (do (run "install:clojure")
                  (run "install:plantuml")
                  (run "install:rime")
                  (run "install:sumatrapdf")
                  (run "install:drawio"))

  patch:drawio (do
                 (doseq [size ["16" "32" "48" "64" "96" "128" "192" "256" "512" "720" "1024"]]
                   (let [script (format "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/build/%sx%s.png -w %s -h %s" size size size size)]
                     (shell "bash -c" script)))
                 (doseq [size ["48" "80" "128" "144" "256"]]
                   (let [script (format "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/drawlogo%s.png -w %s -h %s" size size size)]
                     (shell "bash -c" script)))
                 (doseq [size ["192" "512"]]
                   (let [script (format "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/icon-%s.png -w %s -h %s" size size size)]
                     (shell "bash -c" script)))
                 (shell "bash -c" "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/build/icon.png -w 1024 -h 1024")
                 (shell "bash -c" "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/logo.png -w 150 -h 150")
                 (shell "bash -c" "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/mstile-150x150.png -w 150 -h 150")
                 (shell "bash -c" "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/apple-touch-icon.png -w 180 -h 180")
                 (shell "bash -c" "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/icon-192-maskable.png -w 192 -h 192")
                 (shell "bash -c" "inkscape --export-type=png patch/drawio.svg -o src/drawio-desktop/drawio/src/main/webapp/images/icon-512-maskable.png -w 512 -h 512")
                 (shell "bash -c" "cp patch/drawio.svg src/drawio-desktop/build/icon.svg")
                 (shell "bash -c" "cp patch/drawio.svg src/drawio-desktop/drawio/src/main/webapp/images/drawlogo-color.svg")
                 (fs/copy-tree "patch/drawio-desktop" "src/drawio-desktop" {:replace-existing true}))

  restore:drawio (do
                   (shell "bash -c" "cd src/drawio-desktop/ && git restore .")
                   (shell "bash -c" "cd src/drawio-desktop/drawio && git restore .")
                   (shell "bash -c" "cd src/drawio-desktop/drawio && git clean -f"))
  compile:drawio (do
                   (run "patch:drawio")
                   ;; pacman -S ucrt64/mingw-w64-ucrt-x86_64-yarn
                   (shell "bash -c" "cd src/drawio-desktop && yarn install")
                   (shell {:continue true} "bash -c" "cd src/drawio-desktop && yarn run release-win")
                   (run "restore:drawio"))

  backup:terminal (let [conf-dir (first
                                  (filter (fn [dir] (str/includes? dir "WindowsTerminal"))
                                      (map str (fs/list-dir (str (env "USERPROFILE") "\\AppData\\Local\\Packages")))))]
                    (try (fs/copy (str conf-dir "\\LocalState\\settings.json") "etc/windows-terminal/" {:replace-existing true})
                         (print "Succeed to copy Windows Terminal settings.json.")
                         (catch Exception e
                           (print
                            (str "Failed to copy Windows Terminal settings: " (.getMessage e))))))

  backup (do (run "backup:terminal"))}}
